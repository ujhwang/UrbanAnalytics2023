---
title: "Intro to R - 1"
subtitle: ""
author: "Originally written by Bon Woo Koo & Subhro Guhathakurta; modified by Uijeong Hwang"
institute: "Georgia Institute of Technology"
date: "2023/8/24"
output:
  xaringan::moon_reader:
    css: ["default", "assets/sydney-fonts.css", "assets/sydney.css"]
    seal: false
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '4:3' # alternatives '16:9' or '4:3' or others e.g. 13:9
---
class: inverse, middle

# Intro to R - 1


.font100[
Subhro Guhathakurta & Uijeong Hwang

8/24/2023
]

```{r, include=F}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
```


```{r include=FALSE, warning=FALSE}
nice_table <- function(df, height="150px"){
  return(
    df %>% kable() %>% 
      kable_styling(latex_options="scale_down", font_size=12) %>% 
      scroll_box(width = "100%", height = height)
    )
}
```


```{r, include=F}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
```

---
## What is R?
* R is a powerful programming language for statistical computing, data analysis, and graphics.

* R has a rich ecosystem -- 12,000+ packages available in CRAN (Comprehensive R Archive Network).

* Using **tidyverse** packages, you can easily handle/analyze data and visualize/communicate findings.

* Using **sf** package, you can (almost) replace GIS applications, such as QGIS or ArcMAP.

* It is completely free to use.


---
exclude: true


## What is R?


.mid[
* R makes communicating your data and findings easy through R Markdown, Xaringan slide, etc. 

* You can also create [**dashboards**](https://shiny.rstudio.com/gallery/india-blood-banks.html), blog posts with interactive maps and charts.
]

* You can easily post your work online with just one click in RStudio.

![covid mobility data](https://tilburgsciencehub.com/examples/images/demo_app.png)
<br>

---
exclude: true


## What is R studio?

* R-Studio is a code editor developed for R. 

* R is a language, just like any other language (e.g., English, French etc). You can write R code in any text editor.

* E.g., you can write your English report in Windows Notepad, but people usually use MS Word because it provides convenient functions.


.center[
### *R-Studio is like MS Word for R language.*
]

---
## First thing to do: setting up Docker
.small[
* We will use **Docker**, a platform that allows users to build, share, and run containerized environments.

* Why use it?
    * **Consistency**: Everyone gets the same R version and packages.
    * **Isolation**: A Docker container is an isolated environment for your code.
    * **Popularity**: The most-used developer tool in [Stack Overflow 2023 survey](https://survey.stackoverflow.co/2023/#section-most-popular-technologies-other-tools).
    
    ![:scale 80%](img/docker_popular.png)
    ]

---
## Setting up a Docker container for this course

* Go to [Docker website](https://www.docker.com/), Sign up, and install 'Docker Desktop'.

* Open the Docker Desktop.

* Open a terminal.
    * Windows: Windows key + R and run 'cmd'
    * MacOS: cmd + space and run 'terminal'

* Run **'docker pull uhwang3/cp8883'**.

* Check if you see **uhwang3/cp8883** in Images tab in Docker Desktop

---
## Setting up a Docker container for this course

* Click 'Run' button.
![](img/docker_desktop.PNG)

---
## Setting up a Docker container for this course
.pull-left[
.small[
* Click 'Optional settings' and configure
    * *Container name* can be random
    * Type **8787** in *Host port*
    * Browse *Host path* and select a local directory to bind
    * Type **/home/rstudio** in *Container path*
    * Type **PASSWORD** in *Environment variable* and choose a password
]
]
.pull-right[
![](img/docker_desktop_settings.PNG)
]

---
## How to use the Docker container
* Open a web browser and access **localhost:8787**
    * Username: **rstudio**
    * Password: your own password
![](img/docker_login.PNG)

---
## How to stop the Docker container
* Click 'Stop' button in Containers tab in Docker Desktop
* You can later rerun the container by clicking 'Start' button
![](img/docker_stop.PNG)

---

## RStudio

```{r, include=F, out.height='30%'}
knitr::include_graphics("https://datacarpentry.org/genomics-r-intro/fig/rstudio_session_4pane_layout.png")
```


# ![](https://datacarpentry.org/genomics-r-intro/fig/rstudio_session_4pane_layout.png)

---
exclude: true

## Packages
.mid[
Packages are extensions to R that provide various functions and datasets that the plain R does not have. 
]

###.center[It is like apps for your phone.]

.mid[
**Step 1**: You first need to install a package into your hard drive. Just like installing apps in your phone, you only need to do it once per computer.

**Step 2**: You need to load the package into your R session. This is like opening an app in your phone.

**Step 3**: Now the package is loaded. You can use functions in the package.
]

---
class: inverse, middle, center

# Basics

---
## R as a calculator
I actually use R this way very often.
```{r}
(33 + 43) / 4

exp(2.3) # de-logging natural log

a <- 23 + 21
b <- pi # 3.141593...
a / b
```

---
## Operators

.pull-left[
**Arithmetic operators**
```{r, echo=F}
tribble(
  ~'Operator', ~'Description',
  '+', 'Addition',
  '-', 'Subtraction',
  '*', "Multiplication",
  "/", "Division",
  "^ or **", "Exponentiation",
  "x %% y", "Modulus",
  "x %/% y", "Integer division"
) %>% kable()
```
]

.pull-right[
**Logical operators**
```{r, echo=F}
tribble(
  ~'Operator', ~'Description',
  '<', 'Less than',
  '<=', 'Less than or equal to',
  '==', "Exactly equal to",
  "!=", "Not equal to",
  "!", "Negation (e.g., !x is 'not x')",
  "x | y", "x or y",
  "x & y", "x and y",
  "x %in% y", "x belong to y"
) %>% kable()
```
]


---
## R is case sensitive
* In R, **a** and **A** are not the same. That sounds really simple, but it can really mess up your code and is really hard to find.

* For example, the following code will throw an error. Imagine you are looking for that *capital C* in a script with hundreds of lines of code.

```{r eval=F}
city <- "paris"
City

#> Error: object 'City' not found

```

```{r, include=F}
city <- "paris"
```


Notice that **<-** is assignment operator. This assigns a name (i.e., `city`) a value (i.e., `"paris"`). 

```{r}
city
```

---
## Vector
.footnotesize[
* Vector is a 1-dimensional array that can contain elements of logical, integer, double, complex, character or raw. It can contain only the same data type.
* A vector with 2 or more elements can be created multiple ways. 
* e.g., **c()** concatenates multiple elements of the same type into a vector.

```{r}
a <- seq(1:5)
a

b <- c(1,2,3,4,5)
b
```

```{r eval=F}
c <- c(1, "two", TRUE) # Try this
```
]

---
## Indexing
We use extract operator `[]` to specify which values we'd like to extract or replace.

.footnotesize[
```{r}
# Create a vector
my_vec <- c(5,4,3,2,1)
my_vec

# 2nd element
my_vec[2]
# 1,3,5th element
my_vec[c(1,3,5)]
# using conditional statement
my_vec[my_vec>2]
```
]
---
## Indexing
For 2-dimensional data, we have 2 axes or dimension to parse the data.

.center[.red[data][.blue[row index], .green[column index]]]

.small[
```{r}
# Create a matrix
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3)
my_matrix

# element in 1st row, 2nd column
my_matrix[1,2]
# elements in 1 & 2nd rows, 3rd column
my_matrix[c(1,2), 3]
```
]
---
## Indexing

.center[.red[data][.blue[row index], .green[column index]]]


.scriptsize[
```{r}
# Read data
my_df <- read.csv("https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.csv") # or
my_df %>% head() %>% print()

# Subset
my_df[2,2]

my_df[1:3, "hhincome"]
```

.scroll-box-12[
```{r}
my_df[my_df$hhincome>=100000, ]
```
]
]

---

class: inverse, middle, center

# Application

---
exclude: true

## Setting Environment
R has a concept of **working directory (WD).** R is **looking at** WD when it searches for and save files. .red[I recommend NOT using **setwd().**]  

The best practice is to create a R project folder by **File -> New Project -> New Directory**, and organize all your files related to this project within this folder. 

That creates a **.Rproj** file in that folder. Next time you continue working on the project, double click the **.Rproj** file.


![](img/rproject.png)

---
exclude: true

Let's say you've created a folder called UA_module1. **Store everything related with module 1 here.** An example folder structure would look like:
.footnotesize[

```
UA_module1
|--data
    |--mtcars.csv
|--figs
    |--mpg_hp.png
|--rmd
    |--01_read_data.Rmd
    |--01_read_data.pdf
|--scripts
    |--read_data.R
|--UA_module1.Rproj 
```
]

Notice **UA_module1_Rproj**. Opening .Rproj file will give you a clean R environment. The working directory is where .Rproj file is. 

---
exclude: true

## Setting Environment
After creating .Rproj and opening R with it, call **library(here)**. From now on, you can use relative path for everything using **here()** function that works cross-platform.

**The relative path should start from where .Rproj is located.**

.left-column[
.footnotesize[

```
UA_module1
|--data
    |--mtcars.csv
|--figs
    |--mpg_hp.png
|--rmd
    |--01_read_data.Rmd
    |--01_read_data.pdf
|--scripts
    |--read_data.R
|--UA_module1.Rproj 
```
]
]

.right-column[
Let's say you are working on **/rmd/01_read_data.Rmd** and want to read **/data/mtcars.csv**:
```{r eval=F}
# Reading
library(here)
read.csv(here("data", "mtcars.csv"))
```

Let's say you created a plot using **ggplot2** and want to save it in the **figs** folder:
```{r eval=F}
ggsave(here("figs", "mpg_hp.png"))
```
]

---
## Reading data

In urban analytics for planning, the file formats we usually deal with include (but not limited to) **.CSV**, **.SHP**, **.JSON**, and **.GEOJSON**.

We need different packages to import these data formats. 

* CSV: .tiny[https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.csv]

* SHP: .tiny[https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.geojson]

* JSON: .tiny[https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.json]


```{r eval=F}
# CSV files
df <- read.csv("file-name.csv") # or
df <- readr::read_csv("file-name.csv")

# SHP & GEOJSON files
df <- sf::st_read("file-name.shp")
df <- sf::st_read("file-name.geojson")

# JSON files
df <- jsonlite::fromJSON("file-name.json") %>% as.data.frame()
```

---
## dplyr basics
* We just learned indexing using **[ , ]**. 

* We now use what's called **dplyr verbs**.

```{r, message=F}
# Need data first...
my_df <- read_csv("https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.csv")
my_df %>% nice_table("200px")
```

---
## dplyr basics

#### select, filter, arrange, mutate, slice, group_by + summarise

All verbs work similarly: <font size=2px, color='grey'>(Wickham & Grolemund (2016))</font>

* The first argument of the verbs is a data frame.
* The subsequent arguments describe what to do with the data frame
* The result is a new data frame.

--

e.g., `filter()` picks observations (i.e., rows of a DF) by their values.

```{r}
filter(my_df, # specifies which data.frame
       county == "DeKalb County") %>%  # conditional statement  
  nice_table() # ignore this nice_table() for now.
```

---
## BTW, %>% is called the **pipe**.
.center[.mid[
It takes whatever is passed from **before** the pipe and 

inserts it as **the first argument** of the following function.
]]

```{r eval=F}
filter(my_df, county == "DeKalb County") %>%  
  nice_table("150px")
```

is equivalent to

```{r}
my_df %>% filter(county == "DeKalb County") %>% 
  nice_table("150px")
```

---
## Back to dplyr basics

.pull-left[
* **select()** can pick **variable(s)** by their names.

```{r}
my_df %>% 
  select(county,race.white) %>% #<<
  nice_table()
```
]

.pull-right[
* **arrange()** can reorder **rows**.
```{r}
my_df %>% 
  select(county,race.white) %>% 
  arrange(race.white) %>% #<<
  nice_table()
```

.center[
**Notice that %>% connects multiple dplyr verbs down the line.**

**This is why pipe is so useful!**
]
]

---
## dplyr basics

**mutate()** can create a new columns using existing columns.
```{r}
my_df %>% 
  mutate(pct_white = race.white / race.tot) %>% #<<
  select(2:4, race.tot, race.white, pct_white) %>% nice_table()
```

Notice that **select()** can take either variable names or the index of columns.

Because `2:4` in R is the same as `c(2,3,4)`, we select not only race.tot, race.whte, and pct_white, but also the second, third, and fourth columns **of the data table that were passed to select()**.

---
## dplyr basics
**group_by()** creates a grouping across observations (i.e., rows). With the grouping, **summarise()** can do summarization (e.g., taking average) for each group.

In plain English, this code says "Take **my_df** and calculate the mean of **pct_white** and the median of **hhincome** for each county." It returns a new data table.

```{r}
my_df %>% 
  group_by(county) %>% # creating grouping by county.  #<<
  summarise(sum_white = sum(race.white), 
            sum_race.tot = sum(race.tot),
            med.hhincome = median(hhincome)) %>% 
  mutate(pct_white = sum_white/sum_race.tot) %>% nice_table("160px") 
```

.mid[.center[**Notice that there are NaN and NA here and there.**]]

---
##  NAs and NaNs
NaN stands for **Not a Number.** This results from numerical operation that outputs undefined results. Try `0/0` in your console.

NA stands for **Not available.** This generally means missing value.

Let's see why we had the problem.


```{r}
my_df %>% select(-GEOID, -tract, -county, -state) %>% summary() 
```

Notice that **hhincome** has 5 missing values (NAs). <br> **race.tot** has at least one zero.

---
## Dropping NaN and NA
We need to filter out from both race.tot and hhincome using **>**, **&** , **!**, **is.na()**.

Also notice the exclamation mark (**!**) and **is.na()**.

The highlighted part is saying, "pick rows for which race.tot is greater than 0 **AND** hhincome is not NA."

```{r}
my_df %>% 
  filter(race.tot > 0 & !is.na(hhincome)) %>% #<<
  mutate(pct_white = race.white / race.tot) %>%
  group_by(county) %>% # creating grouping by county.  
  summarise(avg.pct_white = mean(pct_white), # mean for each county
            med.hhincome = median(hhincome)) %>% nice_table("160px")
```

---
[
```{r echo=F}
magick::image_read_pdf("https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf", pages=1)
```
](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

---
# Reading SHP and JSON
Reading SHP and JSON files are no different, except you need some packages. Notice below that we are reading GEOJSON rather than SHP -- they are essentially the same data in different formats (can be slower though).

```{r include=F}
shp <- sf::st_read("https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.geojson")
```


```{r message=FALSE, eval=F}
shp <- sf::st_read("https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.geojson") 
js <- jsonlite::fromJSON("https://raw.githubusercontent.com/ujhwang/UrbanAnalytics2023/main/Lab/module_0/testdata.json", flatten = TRUE)
```

```{r}
shp %>% nice_table()
```

---
# 

```{r out.width="100%", out.height="50%"}
library(leaflet)
pal <- colorNumeric(palette = "Reds", domain = shp$hhincome)

leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolygons(data = shp, fillColor = ~pal(hhincome), fillOpacity = 0.8, weight = 1, color = "white", 
              popup = paste0("Household Income: ", shp$hhincome)) %>% 
  addLegend(position = "topright", pal = pal, values = shp$hhincome, title = "Annual Household Income", bins = 6)
```

---
# More resources
* [**R for Data Science**](https://r4ds.had.co.nz/): Book written by Hadley Wickham who created the tidyverse.

* **swirl package**: Highly recommend this option if you want to start from the basic
```{r eval=F}
install.packages('swirl')
library(swirl)
swirl()
```

* [**Geocomputation with R**](https://geocompr.robinlovelace.net/): Very good resource to learn geocomputation in sf package. We will heavily use sf package in this class.