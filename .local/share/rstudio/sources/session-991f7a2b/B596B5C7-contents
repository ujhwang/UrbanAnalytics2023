---
title: "Tidy Data"
subtitle: ""
author: "Subhro Guhathakurta & Uijeong Hwang"
institute: "Georgia Institute of Technology"
date: "2023/9/12"
output:
  xaringan::moon_reader:
    css: ["default", "assets/sydney-fonts.css", "assets/sydney.css"]
    seal: false
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '4:3' # alternatives '16:9' or '4:3' or others e.g. 13:9
---
class: middle, inverse

# Tidy Data

.font100[
Subhro Guhathakurta & Uijeong Hwang

9/12/2023
]

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
style_mono_accent(
  base_color = "#1c5253",
  header_font_google = google_font("Open Sans"),
  text_font_google   = google_font("Source Sans Pro", "400", "400i"),
  code_font_google   = google_font("Fira")
)

nice_table <- function(df, height="150px"){
  return(
    df %>% kable() %>% 
      kable_styling(latex_options="scale_down", font_size=12) %>% 
      scroll_box(width = "100%", height = height)
    )
}
```

```{r, include=F}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
library(tidycensus)
```

---
## Content
* Final project proposal
* Categories
* Wide vs. Long forms
* Saving files
* Anonymous function
* Converting existing data frame into a sf object


---
## Final project proposal

<br>
.center[
Please submit 300~500-word long write-up of the project proposal.   
]
<br>

**Purpose**: This proposal is to encourage you to start thinking about the project topic & potential data sources. 

**Ungraded**: Will not affect your grade in any way.  

**Submit by**: Oct 7th (Friday) 11:59 PM.  

**Submit through**: Canvas > Assignment > Final Project Proposal.  

---
## Categories on Yelp API

Error correction!!

* Argument name in business_search should be "categories", not "category".
* The string you supply must be from the [list that Yelp provides](https://www.yelp.com/developers/documentation/v3/all_category_list).

.footnotesize[
```{r, eval=F}
business_search(api_key = Sys.getenv('yelp_api'), 
                        categories = 'restaurants', #<<
                        latitude = ready_4_yelp$y[which_tract],
                        longitude = ready_4_yelp$x[which_tract],
                        offset = 0, 
                        radius = round(ready_4_yelp$radius[which_tract]), 
                        limit = 50)
```

]
 

---
## Wide vs. Long forms
```{r, include=F, message=F}
census_api_key(Sys.getenv("census_api"))

suppressMessages(
census_wide <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', race.tot = "B02001_001"), 
                       county="Fulton", year=2019, output="wide", geomtry=TRUE))
suppressMessages(
census_long <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', race.tot = "B02001_001"), 
                       county="Fulton", year=2019, geomtry=TRUE))
```
.footnotesize[
.pull-left[

with `output="wide"`:

```{r}
census_wide %>% 
  head() %>%  
  nice_table("350px")
```
]

.pull-right[
with `output="long"`:

```{r}
census_long %>% 
  head() %>% 
  nice_table("350px")
```
]
]
---
## Wide vs. Long forms

.footnotesize[
```{r}
longer <- census_wide %>% 
  pivot_longer(cols = hhincomeE:race.totM, # Cols to be affected
               names_to = c("variable"), # Name for the label column
               values_to = c("value")) # Name for the value column
longer
```
]
---
## Wide vs. Long forms

.footnotesize[
```{r}
wider <- longer %>% 
  pivot_wider(id_cols = c(GEOID, NAME), 
              names_from = c("variable"),
              values_from = c("value")) 
wider
```
]

---
## Saving files

### R-Native File formats
**.RData**: Native data storage format for R. Can store multiple objects.    
**.RDS**: Short for RData. Can only store one object.  

### Read/write RDS (recommended over RData)
**write_rds(), read_rds()** from readr package -> Works the same way as write.csv, read.csv.  

### Read/write RData 
**save(), save.image()** from base R -> save() function can save multiple objects. save.image() saves the entire environment.  
**load()** from base R -> The biggest different from .RDS is that you do not use **<-** for load(). It stores the original object name as well.

---
## Anonymous function

* When using **apply()** or **map()**, you can provide an existing or a custom-made function.
* Similar to lambda in Python, R has anonymous function. 
* Anonymous function is a function defined on the fly and disappears after execution.

.footnotesize[
.pull-left[
```{r}
map(1:5, # input vector
    function(x) x + 1) # anonymous function
```
]

.pull-right[
```{r}
map(1:5, # input vector
    function(x){ # anonymous function with {}
      out <- (x + 1)*x
      return(out)
    })
```
]
]

---
* map() and other variants has a nice syntax that make the code simple. 
* Instead of declaring `function(x)`, you can use a tilde (~) to indicate that it is anonymous function.
* `x`s inside the anonymous function needs to be preceded by a period (.). See the example below.
.footnotesize[
```{r}
map(1:5, # input
    ~(.x + 1)*.x ) # tilde replaces function().  # x is preceded by a period
```
]

---
## Existing data frame into a sf object
* You can convert a data frame with lng/lat into a sf object. This can be done using **st_as_sf()**. 

* The word 'as' indicates that it converts an *existing* object to sf rather than creating one from scratch.

.footnotesize[
```{r, out.width="100%"}
# A data frame with XY info
point_df <- data.frame(x = c(-84.3991, -84.4010, -84.3899), 
                       y = c(33.7770, 33.7748, 33.7777))

# st_as_sf
point_df %>% 
  st_as_sf(coords = c("x", "y"), crs = 4326) %>% 
  tm_shape(.) + tm_dots()
```
]
---
## Extension to the Mini Assignment 1

* Now due next Tuesday (20).
* Mini-assignment 2 is due next Friday (23).
* Instructions on mini-assignment 2 can be found [here]() or syllabus.

---
## Detecting string - str_detect/grepl

* Some people downloaded two Yelp categories at once.
* Rows for category A and B will be mixed.
* To count how many As and Bs are there each, you need to be able to search strings.

grepl(.red[pattern], .blue[string])
```{r}
a <- c("yoga studio", "health gym", "pizza", "YoGa")
grepl("yoga", a)
```

str_detect(.blue[string], .red[pattern])
```{r}
str_detect(a, "yoga")
```







