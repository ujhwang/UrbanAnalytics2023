---
title: "Data for Urban Analytics"
subtitle: ""
author: "Bon Woo Koo & Subhro Guhathakurta"
institute: "Georgia Institute of Technology"
date: "2022/9/1"
output:
  xaringan::moon_reader:
    css: ["default", "assets/sydney-fonts.css", "assets/sydney.css"]
    seal: false
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '4:3' # alternatives '16:9' or '4:3' or others e.g. 13:9
---
class: inverse, middle

# Intro to R - 2


.font100[
Bon Woo Koo & Subhro Guhathakurta

9/1/2022
]

```{r, include=F}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
```
---
## Content

* Rpubs & R Markdown
* Loops and functionals
* geospatial data in R

---
class: inverse, center, middle

# Rpubs & R Markdown

---
## Rpubs
RPubs is an open platform by R Studio (the company) for publishing R Markdown documents and presentations. 
* It's free. 
* Everything you upload there is open to public.
* **DO NOT** upload anything you need to protect (e.g., API keys, personal info etc.).

To create an account, [**click here**](https://rpubs.com/).

---
## R Markdown 
**Markdown** is a markup language that adds formatting elements to plaintext text documents.

**R Markdown** is a markdown that contains chunks of embedded R code.

* Our syllabus is a R Markdown document in which all tables are written in R code. <br>
* A cooler example is [this](http://timelyportfolio.github.io/rCharts_nyt_home_price/).

To create a R Markdown file, go to **file > R Markdown.**
![](markdown_init.JPG)

---
## Basics

* Hash tags for headings.
# # Heading 1 (h1)
## ## Heading 2 (h2)

* Nothing for plain text. End the line with two spaces at the end starts a new line.

* Control + Alt + i to create a R code chunk.
```{r}
0.1 + 0.2 == 0.3
```

---
## Basics

* Press Knit button or Control + Alt + k to render it as HTML (or other formats).

* Wrap text with \*\*\*\* to make it bold, or \*\* to make it italic.

* \[text\]\(url\) to make text a hyperlink.

* \!\[caption\]\(url or file\) to embed an image.

* Start a line with * or - to start a bulleted list and 1. for a numbered list.

* HTML tags work. E.g., `<br>` `<font>` etc. 

<br>

**Go to Help > Cheat Sheets > R Markdown Cheat Sheets** to see more options.

---
## Publishing on Rpubs
![](rpubs_process.png)

For your assignment, you can submit the link, which in this case would be:
http://rpubs.com/BonWooKoo/this_will_your_link

---
class: inverse, middle, center
# Loops

---
## For-Loops
Loops are used to repeat a specific task. Ones that I commonly use include for loop, while loop, and apply.

.pull-left[
**A for loop** iterates over a vector.
```{r}
for (i in 1:3){
  print(i)
}
```

```{r}
for (i in 1:3){
  print(i + 2)
}
```
]

.pull-right[
```{r}
a <- letters[1:5]
for (letter in a){
  print(letter)
}
```

]

---
.footnotesize[
```{r}
my_df <- read_csv("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.csv")

for (i in 1:10){
  # Extract row by row
  row <- my_df[i,]
  # If Clayton County, print income
  if (row$county == "Clayton County") print(paste0(row$county,"'s income is: ", row$hhincome))
  # If Cobb County, print population
  else if (row$county == "Cobb County") print(paste0(row$county,"'s population is: ", row$race.tot))
}
```
]
---
## While-Loop

.footnotesize[
**A while loop** keeps repeating the task as long as a specified condition is true.
```{r}
# this is condition that's 
# being check each iteration
n <- 1
v <- 1
while (v < 1000){ 
  # if (n >= 0), it will run forever
  print(paste0(n, "th iteration -- ,v is ", v))
  v <- v*2
  n <- n+1
}
print(v)
```


This is useful when you do not know exactly how many iteration is needed ahead of time. 

For example, you'd want to keep calculating some stuff (e.g., stochastic gradient descent) until the output converges to a pre-defined value.
]


---
## Apply

.footnotesize[
.pull-left[
```{r}
# Loop
for (i in 1:3){
  print(i+1)
}
```
]

.pull-right[
```{r}
add_one <- function(x) x+1
print(sapply(1:3, add_one))
```
<br><br>
]]



.footnotesize[
Another way to perform a similar task is to use apply family or its variants. The most commonly used ones would be **sapply**, **lapply**, and **apply.**

**sapply** and **lapply** are the same except that one returns a vector and the other returns a list.
```{r}
add_one <- function(x) x+1
lapply(1:3, add_one)
```
]

---
## Apply 
Apply takes matrix or data.frame and outputs a list. Because matrix and data.frame has two dimensions, apply takes an additional argument that specifies the dimension to which the function should be applied.

```{r}
# Example data.frame
ex <- data.frame(matrix(c(rep(1,3),rep(2,3), rep(3,3)), nrow=3))
# Apply function across column
print(apply(ex, 1, mean))

# Apply function across rows
print(apply(ex, 2, mean))
```


---
class: inverse, middle, center

# Geospatial data in R

---

class: center, middle
![](./sf/sf-05.jpg)
---
class: center, middle
![](./sf/sf-06.jpg)

---
class: center, middle
![](./sf/sf-07.jpg)
---

.font180[.green[sf package in R]]

The **sf** stands for simple features. 

**"Simple features are a standardized way of encoding spatial vector data (points, lines, polygons) in computers" (Pebesma, 2018, 439).**

.font80[
* *Feature* can be thought of as "things" or objects that have a spatial location or extent (e.g., building or political state).
* *Feature geometry* refer to the spatial properties (location or extent) of a feature.
* *Feature attributes* refer to other properties that features have, such as name, some measured quantity, etc.
]


.footnote[
This content is adopted from Pedesma (2018) [Read](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)
]

---
class: center, middle
![](./sf/sf-09.jpg)

---
class: center, middle
![](./sf/sf-10.jpg)

---
class: center, middle
![](./sf/sf-11.jpg)

---
class: center, middle
![](./sf/sf-12.jpg)
---

* Fast reading and writing of data (but not necessarily plotting)
* sf objects can be treated as data.frames
* Works smoothly with dplyr verbs as well as %>%.
* I personally do not use ArcGIS at all. 99% of my GIS works are done in R using sf package.

![](https://r-spatial.github.io/sf/articles/sf_xfig.png)
.footnote[image source: https://r-spatial.github.io/sf/articles/sf1.html]

---
## Let's do some coding

```{r, eval=F}
library(sf)
census <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.geojson")
marta <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/MARTA_Routes.geojson")
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") 
```

```{r message=F, include=F}
census <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.geojson") 
marta <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/MARTA_Routes.geojson") 
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") %>% st_set_crs(4326)
```

.footnotesize[.scroll-box-18[
```{r}
census %>% print()
```
]]
---
## What's inside geometry column
.footnotesize[
.scroll-box-10[
```{r}
census %>% st_geometry()
```
]
]
.scroll-box-10[.footnotesize[
```{r}
census %>% st_coordinates()
```
]]
---
## Interactive Mapping - tmap package
```{r, out.width="100%", out.height="300px"}
library(tmap)
tmap_mode('view')
tm_shape(census) + tm_polygons(col="hhincome")
```

---
## Data manipulation

.font90[
#### sf objects ARE data frames. .font60[.gray[(Note that sfc, sfg, etc. are not dataframes.)]]
Most verbs from dplyr packages work with sf objects. 

.scroll-box-18[
```{r, out.width="100%"}
census_group <- census %>% 
  select(county, hhincome) %>% 
  filter(county %in% c("Clayton County", "Fulton County")) %>% 
  group_by(county) %>% 
  summarise(count = n(),
            med.income = median(hhincome, na.rm = TRUE))
census_group
```
]]

---

The **group_by() + summarise()** combination modifies the geometry too. 
```{r out.width="100%"}
tm_shape(census_group) + tm_polygons(col = "med.income")
```


---
## Subsetting by location

When you have two or more sf objects, you can select a subset. Let's do a demo with Census Tracts and a 10-KM buffer from the Five Points Station.


.pull-left[
.footnotesize[
```{r eval=F}
# Visualization
leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolygons(data = census, weight=1, color="grey") %>% #<<
  addPolygons(data = five_point, weight=1) %>% #<<
  addLegend("bottomright", 
            colors = c("blue", "grey"), 
            labels = c("five_point", 
                       "poly"), 
            title="Legend")
```
It's okay if you don't understand this code. We will learn about **leaflet** package later. 
]]

.pull-right[
.script-size[
```{r echo=F, message=F, warning=F}
fp.buffer <- suppressWarnings(five_point %>% st_buffer(dist = 10000)) 
# Visualization
leaflet(height=330, width="100%") %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolygons(data = census, weight=1, color="grey") %>% 
  addPolygons(data = fp.buffer, weight=1) %>% 
  addLegend("bottomright", 
            colors = c("blue", "grey"), 
            labels = c("five_point", 
                       "poly"), 
            title="Legend")
```
]]
---
## Subsetting
The magic syntax is: 

.center[.red[sf-obj-1][.blue[sf-obj-2], , .green[operation]]]

.small[
```{r}
# Subsetting
census.subset <- census[five_point, , op = st_intersects] 
```
]

.scriptsize[
```{r, out.width="100%", out.height="300px"}
# Visualization
tm_shape(census.subset) + tm_polygons() +
  tm_shape(five_point) + tm_borders(col = "blue")
```
]

---
## Predicates
.font80[
In GIS, "**predicates are Boolean functions** that return TRUE if a comparison meets the functions criteria; otherwise, they return FALSE (f), to determine if a specific relationship exists between a pair of geometries." ([ESRI](https://help.arcgis.com/en/geodatabase/10.0/sdk/arcsde/concepts/geometry/shapes/spatial_relations/predicates.htm)).

Try **?st_intersects** in your console.
]

![](predicates.jpg)
 
---

.footnotesize[
```{r}
pred_within <- census[five_point, , op = st_within]
pred_disjoint <- census[five_point, , op = st_disjoint]
pred_is_within_distance <- census[five_point, , op = st_is_within_distance,dist=10000]
```

```{r}
a <- leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolygons(data = pred_is_within_distance, weight=1,color="grey") %>% 
  addPolygons(data = five_point, color="black") %>% 
  addControl(html="<b>st_is_with_distance (10k)</b>", "topright")

b <- leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolygons(data = pred_disjoint, weight=1,color="grey") %>% 
  addPolygons(data = five_point, color="black") %>% 
  addControl(html="<b>st_disjoint</b>", "topright")

leafsync::sync(a,b)
```
]
---
## Predicates

```{r, echo=F}
knitr::include_graphics("https://geocompr.robinlovelace.net/05-geometry-operations_files/figure-html/venn-clip-1.png")
```

---

## Buffer, intersection, etc.
Usual GIS operations work the same way in R as they do in ArcMap, for example.

.footnotesize[
```{r, out.width="100%", out.height="300px"}
# Buffer (5K) + intersection
buf <- marta %>% st_buffer(dist = units::set_units(5000, "m"))
buf_int_census <- buf %>% st_intersection(census)

tm_shape(census) + tm_polygons(col = "gray") + 
  tm_shape(buf_int_census) + tm_polygons(col = "red") +
  tm_shape(marta) + tm_lines(col = "blue", lwd = 3)
```
]

---
class: inverse, center, middle

#If we have time left..

---
## Spatial join
.footnotesize[
Spatial join is incredibly useful tool that allows you to join two or more datasets based on geographic proximity that are otherwise disconnected. 

Two most important things to remember is that:

- The order in which you supply sf objects matters. If you do **st_join(A, B)**, A will the output with added information from B. If you do **st_join(B,A)**, B will be the output with information from A attached to it.

- The two (or more) sf objects should share the same CRS. 

```{r out.height='150px'}
# Join marta + census
m_j_c <- marta %>% st_join(census, st_intersects)
mjc_map <- tm_shape(m_j_c) + tm_lines(col = "hhincome")

# Join census + marta
c_j_m <- census %>% st_join(marta, st_intersects)
cjm_map <- tm_shape(c_j_m) + tm_polygons(col = "hhincome")

tmap_arrange(mjc_map, cjm_map, sync = T)
```
]
---

.footnotesize[
```{r}
# This is LINESTRING of marta lines
m_j_c %>% nice_table()

# This is POLYGON of census tracts
c_j_m %>% nice_table()
```
]

---
## Visualizing linestring and points
Let's visualize the first LINESTRING (i.e., Blue Line of MARTA) and the points that makes the LINESTRING.


.pull-left[
#### Extracting points
.scroll-box-20[
.footnotesize[
```{r}
marta.point <- marta %>% 
  # Extract the first row
  slice(2) %>% 
  # Turn it into coordinates
  st_coordinates() %>% 
  # Turn it into df
  as.data.frame() %>% 
  # df to sf
  st_as_sf(coords = c("X", "Y"), 
           crs = 4326)

marta.point
```
]
]
]

.pull-right[
#### Extracing line
.scroll-box-20[
.footnotesize[
```{r}
marta.line <- marta %>% 
  # Extract the first row
  slice(2) 

marta.line
```
]
]
]
---
## Plotting them together

```{r out.width="100%", out.height="50%"}
library(leaflet)
marta.point2 <- marta.point %>% group_by(L1) %>% slice(1)
pal <- colorNumeric(palette = "Reds", domain = marta.point2$L1)

leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% # Background map
  addPolylines(data = marta %>% slice(c(1,3)), 
               color="grey", weight=1) %>% # Adding non-Blue lines
  addPolylines(data = marta.line) %>% # Adding marta.line #<<
  addCircles(data = marta.point2, fillColor = ~pal(L1), fillOpacity=0.9, 
             stroke = F, radius = 500,
             popup=paste0("Row ID: ", marta.point2$L1)) # Adding marta.point #<<
```

---
## Why this is useful
Being able to parse the geometry at point level allows us to do any manipulation we want to do. 

For example, we want to cut the line into two at near Five Points Station (33.7539, -84.3916).
.footnotesize[
.scroll-box-14[
```{r}
# Creating POINT feature for five point station
five_point_station <- st_point(c(-84.3916, 33.7539)) %>% st_sfc(crs = 4326)

# Calculate pairwise distance to all points that define Gold line
dist.mat <- marta.point %>% st_distance(five_point_station)

# Which row contains the closest point?
closest.pnt <- which.min(dist.mat)

# Parse marta.line and create a cut-off line
marta.line.cut <- marta.line %>% 
  st_coordinates() %>% as.data.frame() %>% 
  mutate(break.point = c(rep("South",closest.pnt), rep("North",nrow(.)-closest.pnt))) %>% 
  st_as_sf(coords=c("X", "Y"), crs = 4326) %>% 
  group_by(break.point, L1) %>% summarise(do_union=FALSE) %>% st_cast("LINESTRING") %>% 
  group_by(break.point) %>% summarise(do_union=FALSE) %>% st_cast("MULTILINESTRING")

marta.line.cut
```
]
]

.center[
### No need to understand this code! I just wanted to demonstrate what can be done.
]
---
.scriptsize[
```{r, out.width="100%"}
pal <- colorFactor(palette = c("red", "blue"), domain = marta.line.cut$break.point)
  
leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addPolylines(data = marta.line.cut, color = ~pal(break.point)) %>% 
  addPolylines(data = marta %>% slice(1,3), color="grey", weight=1) %>% 
  addCircles(data=five_point_station, color="black", radius=300) %>% 
  addLegend("bottomright", pal = pal, values = marta.line.cut$break.point)
```
]