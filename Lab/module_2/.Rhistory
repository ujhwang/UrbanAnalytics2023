options = layersControlOptions(collapsed = FALSE)
)
# Intersect buffer with tract
buffer_per_tract1 <- acs2020c %>%
st_transform(crs = 26967) %>%
st_intersection(MARTA_buffer_group) %>%
filter(route_type == "Bus") %>%
# After Intersection
mutate(subarea = unclass(st_area(.)),
pct_served1 = subarea/area1,
pct_served2 = subarea/area2) %>%
st_transform(crs = 4326)
buffer_per_tract2 <- acs2020c %>%
left_join(buffer_per_tract1 %>% select(GEOID, pct_served1) %>% st_set_geometry(NULL),
by = "GEOID") %>%
# There are many NAs in the pct_served1 column
mutate(pct_served1 = case_when(is.na(pct_served1) ~ 0,
TRUE ~ pct_served1))
pal <- colorNumeric(palette = "YlOrRd", domain = buffer_per_tract2$pct_served1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = buffer_per_tract2,
fillColor = ~pal(pct_served1), fillOpacity = 0.9,
color = "white", opacity = 0.2,
weight = 1) %>%
addLegend("bottomright",
pal = pal,
values = buffer_per_tract2$pct_served1,
title = "% Area within 400m from transit line")
# Is there any correlation between SES and service area?
var_name <- list(
'hhinc'="Annual Household Income",
'pct_bl'="% Black population",
'pct_novhc'="% Household without vehicle",
'pct_wh'="% White population",
'r_tot'="Total population",
'ln_pop_den' = "Population density"
)
var_labeller <- function(variable, value){
return(var_name[value])
}
na_index <- buffer_per_tract2 %>%
select(hhinc, r_tot, ln_pop_den, starts_with('pct')) %>%
is.na(.) %>%
apply(., 1, function(x) sum(x)==0)
buffer_per_tract2 %>%
filter(na_index) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"), names_to = "variable", values_to = "value") %>%
ggplot() +
geom_point(aes(x = pct_served1, y = value), alpha = 0.4) +
facet_wrap(~variable, scales = "free_y", labeller = var_labeller) +
labs(x = "% Area with 400m beffer from transit line") +
theme_bw()
?labellers
census_centrality
census_centrality_plot
census_centrality_plot$variable
factor(census_centrality_plot$variable)
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = centrality, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = centrality, y = value))
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
network_char %>% st_as_sf("nodes"))
network_char %>% st_as_sf("nodes")
census_centrality <- acs2020c[bb_sf, ,op = st_within] %>%
st_join(network_char %>% st_as_sf("nodes")) %>%
group_by(GEOID) %>%
summarise(n = n(),
hhinc = mean(hhinc, na.rm = T),
pct_wh = mean(pct_wh, na.rm = T),
pct_bl = mean(pct_bl, na.rm = T),
pct_novhc = mean(pct_novhc, na.rm = T),
node_bc = mean(node_bc, na.rm = T))
tm_shape(acs2020c) + tm_polygons(col = "grey", alpha = 0.5) +
tm_shape(census_centrality) + tm_polygons(col = "node_bc", style = "quantile") +
tm_shape(bb_sf) + tm_borders()
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
census_centrality_plot
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
?factor
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% White", "% Black", "% No HH with no cars")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% White", "% Black", "% No HH with no cars")))
census_centrality_plot
census_centrality_plot
census_centrality_plot %>% arrange(variable)
census_centrality_plot %>% arrange(desc(variable))
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>% pull(variable)
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>% pull(variable) %>% factor()
# Is there any correlation between SES and service area?
stop_tract_plot <- stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c('Household Income', "Population Density", "% Black",
"% No car", "% White", "Total Population")))
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
test_var <- c("hhinc", "pct_bl", "pct_wh", "pct_novhc", "r_tot", "ln_pop_den")
map_chr(test_var, function(x){
cor.object <- cor.test(buffer_per_tract2[['pct_served1']],
buffer_per_tract2[[x]])
r <- round(cor.object$estimate,3)
t <- round(cor.object$statistic,3)
p <- round(cor.object$p.value,3)
return(paste0("for ",x ,", r=", r, " (t=", t, ", p=", p, ")"))
})
service_ids <- atl$.$dates_services %>% pull(service_id)
stop_freq <- get_stop_frequency(atl, start_time = 3600*7, end_time = 10*3600, service_ids = service_ids, by_route = T)
stop_freq_sf <- atlsf$stops %>%
left_join(stop_freq, by="stop_id") %>%
filter(!is.na(n_departures))
freq_pal <- colorNumeric("Reds", stop_freq_sf$n_departures)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircles(data = stop_freq_sf,
fillColor = freq_pal(stop_freq_sf$n_departures),
fillOpacity = 0.8,
weight = 10,
stroke = FALSE,
popup = str_c(stop_freq_sf$stop_name, ": ", stop_freq_sf$n_departures)) %>%
addLegend(position = "bottomright",
pal = freq_pal,
values = stop_freq_sf$n_departures,
title = "Count of Departures <br> between 7AM and 10AM")
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
knitr::kable(head(stop_tract))
z <- function(vector){ round((vector - mean(vector))/sd(vector), 3) }
pass_per_stop_pal <- colorQuantile(palette = "Reds", domain = stop_tract$n_departures)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = stop_tract,
fillColor = pass_per_stop_pal(stop_tract$n_departures),
fillOpacity = 0.8,
color = 'grey',
weight = 1,
popup = paste0("ID: ", stop_tract$GEOID, ", Value: ", stop_tract$n_departures)) %>%
addLegend(position = "bottomright",
values = stop_tract$n_departures,
pal = pass_per_stop_pal)
message(str_c("there are ", sum(is.na(stop_tract$n_departures)), " NAs in n_departures"))
# Is there any correlation between SES and service area?
stop_tract_plot <- stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c('Household Income', "Population Density", "% Black",
"% No car", "% White", "Total Population")))
departure_count <- stop_tract_plot %>%
ggplot() +
geom_point(aes(x = n_departures, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Count of departures between 7AM and 10AM", title = "Departure Count VS. Socio-demographics") +
theme_bw()
plotly::ggplotly(departure_count)
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value")
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>% pull(variable)
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>% pull(variable) %>% factor()
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c("Household Income", "% Black", "% No HH with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
ggplotly(centrality_plot)
xaringan:::inf_mr()
xaringan:::inf_mr()
df <- read_csv("C:/Users/bkoo34/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_0/testdata.csv")
head(df)
library(tidycensus)
shp <- get_acs("tract", year = 2017, output = "wide", geometry=T)
shp <- get_acs("tract", year = 2017, output = "wide", geometry=T,                  variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003'
),)
shp <- get_acs("tract", "GA", c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T,                  variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003'
),)
shp <- get_acs("tract", "GA", c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001'))
library(tidyverse)
library(sf)
library(tidycensus)
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001'))
shp
my_df
unique(my_df$COUNTY)
head(shp8)
head(shp)
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003'))
shp
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003')) %>%
select(GEOID, NAME, ends_with("E"))
shp
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003')) %>%
select(GEOID, NAME, ends_with("E")) %>%
rename(across(ends_with("E"), function(x) x[1:(nchar(x)-1)]))
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003')) %>%
select(GEOID, NAME, ends_with("E")) %>%
rename(across(ends_with("E"), ~.x[1:(nchar(.x)-1)]))
shp <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "DeKalb","Clayton","Cobb"), year = 2017, output = "wide", geometry=T, variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003')) %>%
select(GEOID, NAME, ends_with("E")) %>%
rename(hhincome = hhincomeE,
race.tot = race.totE,
race.white = race.whiteE,
race.black = race.blackE)
shp
shp.csv <- st_set_geometry(shp, NULL)
shp.csv
separate
?separate
head(shp)
shp <- shp %>% separate(col = NAME, into = c("tract", "county", "state"), sep = ", ")
shp
shp.csv <- st_set_geometry(shp, NULL)
st_write(shp, "C:/Users/bkoo34/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_0/testdata.geojson")
write_csv(shp.csv, "C:/Users/bkoo34/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_0/testdata.csv")
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Open Sans"),
text_font_google   = google_font("Source Sans Pro", "400", "400i"),
code_font_google   = google_font("Fira")
)
nice_table <- function(df, height="150px"){
return(
df %>% kable() %>%
kable_styling(latex_options="scale_down", font_size=12) %>%
scroll_box(width = "100%", height = height)
)
}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
knitr::include_graphics("https://datacarpentry.org/genomics-r-intro/fig/rstudio_session_4pane_layout.png")
my_df <- read_csv("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.csv")
my_df %>% nice_table("200px")
filter(my_df, # specifies which data.frame
COUNTY == "DeKalb County") %>%  # conditional statement
nice_table() # ignore this nice_table() for now.
my_df
filter(my_df, # specifies which data.frame
county == "DeKalb County") %>%  # conditional statement
nice_table() # ignore this nice_table() for now.
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Open Sans"),
text_font_google   = google_font("Source Sans Pro", "400", "400i"),
code_font_google   = google_font("Fira")
)
nice_table <- function(df, height="150px"){
return(
df %>% kable() %>%
kable_styling(latex_options="scale_down", font_size=12) %>%
scroll_box(width = "100%", height = height)
)
}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
knitr::include_graphics("https://datacarpentry.org/genomics-r-intro/fig/rstudio_session_4pane_layout.png")
my_df <- read_csv("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.csv")
my_df %>% nice_table("200px")
filter(my_df, # specifies which data.frame
county == "DeKalb county") %>%  # conditional statement
nice_table() # ignore this nice_table() for now.
my_df %>% filter(county == "DeKalb county") %>%
nice_table("150px")
my_df %>%
select(county,tot_age25) %>% #<<
nice_table()
my_df
my_df %>%
select(county,race.white) %>% #<<
nice_table()
my_df %>%
select(county,race.white) %>%
arrange(race.white) %>% #<<
nice_table()
my_df %>%
select(county,race.white) %>%
arrange(race.white) %>% #<<
nice_table()
my_df %>%
mutate(pct_white = race.white / race.tot) %>% #<<
select(2:4, race.tot, race.white, pct_white) %>% nice_table()
head(my_df)
my_df %>%
group_by(county) %>% # creating grouping by county.  #<<
summarise(avg.pct_white = mean(pct_white), # mean for each county
med.hhincome = median(hhincome)) %>% nice_table("160px")
my_df %>%
mutate(pct_white = race.white / race.tot) %>%
group_by(county) %>% # creating grouping by county.  #<<
summarise(avg.pct_white = mean(pct_white), # mean for each county
med.hhincome = median(hhincome)) %>% nice_table("160px")
my_df %>% mutate(pct = race.white / race.tot) %>% summary()
my_df %>% mutate(pct = race.white / race.tot) %>% filter(is.na(pct))
xaringan:::inf_mr()
0/0
3/0
my_df %>% summary
my_df %>% summary() %>% nice_table()
my_df %>% filter(race.tot ==0 )
xaringan:::inf_mr()
head(shp) %>% nice_table()
library(sf)
shp <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.geojson")
head(shp) %>% nice_table()
xaringan:::inf_mr()
pal <- colorNumeric(palette = "Reds", domain = shp$hhincome)
xaringan:::inf_mr()
xaringan:::inf_mr()
library(sf)
library(tidyverse)
library(kableExtra)
# setwd("C:/Users/bkoo34/Dropbox (GaTech)/Work/Working/Colab_tree_canopy/data/processed_img")
setwd("D:/Dropbox (GaTech)/Work/Working/Colab_tree_canopy/data/processed_img")
Sys.getenv("setwd")
wd_path <- file.path(eval(Sys.getenv("setwd")),"Work/Working/Colab_tree_canopy/data/processed_img")
getwd()
wd_path
wd_path <- file.path(eval(Sys.getenv("setwd")),"Work/Working/Colab_tree_canopy/data/processed_img")
setwd(wd_path)
shp <- st_read("masterdata_0802_Bonwoo.geojson")
master <- read_csv("masterdata_0804.csv")
master_sp <- read_csv("masterdata_0802_spatial.csv") %>% select(segment_id, starts_with("s_"))
tree_ds <- read_csv("masterdata_0804_ds.csv")
shp <- shp  %>%
left_join(master %>%
select(segment_id, job_d, black_d, starts_with("a_")), by = "segment_id") %>%
left_join(master_sp, by = "segment_id") %>%
left_join(tree_ds %>% select(tree_ds, segment_id), by="segment_id")
suppressWarnings(
a <- MASS::glm.nb(t_assault ~ tree_canopy + pct_sidewalk_360 + resi_0or1 + com_0or1 +
park_0or1 + job_d + pop_d + black_d + ws + bus_d + surface_b +
med_income + offset(log(feet)), data = shp)
)
summary(a)
print(nrow(a$model))
xaringan:::inf_mr()
xaringan:::inf_mr()
